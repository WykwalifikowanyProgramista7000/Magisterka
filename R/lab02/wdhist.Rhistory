setwd("~/Temp/Lab01")
setwd("~/Lab01")
A<-5
A<-c(20, 13, 4, -5)
A
A[1]
A>0
A[2:3]
A[c(-2, -4)]
B<-(first=12, second=8, third=18)
B<-c(first=12, second=8, third=18)
B["second"]
C<-1:4
A*C
c<-1:3
A+C
1:4+1:3
1:4+1:3
1:4+1:3
1:4+1:2
4:20
20:4
seq(10)
seq(4:20,2)
seq(from=4, to=20, by=2)
5 % 4
5 %% 4
1:4 %% 2
X<-matrix(0, nrow=5, ncol=6)
X<-matrix(1:2, nrow=5, ncol=6)
X
for(i in 1:5)
{X[i, i+1]<-X[i, i+1]+2
X[i,i+1]}
x
X
Y<-matrix(1:2, nrow=5, ncol=6)
X+Y
X*Y
X[,1:5]%*%Y
det(x,[1:5])
demo("graphics")
demo(image)
?q
q()
A1<-1:20
delete A1
E1<-1:20
E2<-20:1*0:-1
E2
E2.delete
E2 remove()
remove(E2)
E2[E2 %% 2 == 0] <- -E2[E2 %% 2 == 0]
E2<-1:20
E2[E2 %% 2 == 0] <- -E2[E2 %% 2 == 0]
E2
E2<-20:1
E2[E2 %% 2 == 0] <- -E2[E2 %% 2 == 0]
E2
E2<-20:1
E2[E2 %% 2 == 1] <- -E2[E2 %% 2 == 1]
E2
for (a in seq(10,100)) {
count <- count + a**3 + 4*a**2
}
for (a in seq(10,100)) {a**3 + 4*a**2
}
E31=0
E31<-0
for (a in seq(10,100)) {
E31 <- E31 + a**3 + 4*a**2
}
A = rbind(c(1,1,3), c(5,2,6), c(-2,-1,-3))
A
A**3
det(A**3)
B=A*A*A
det(B)
matE = matrix(0, nrow=6, ncol=6, col=3)
matE = matrix(0, nrow=6, ncol=6)
metE
matE
matE[col(matE)==row(matE)-1] = 1
matE[col(matE)-1==row(matE)] = 1
matE
A = rbind(c(1,2,3,4,5),c(2,1,2,3,4), c(3,2,1,2,3), c(4,3,2,1,2),c(5,4,3,2,1))
A = rbind(c(1,2,3,4,5),c(2,1,2,3,4), c(3,2,1,2,3), c(4,3,2,1,2),c(5,4,3,2,1))
A = rbind(c(1,2,3,4,5),c(2,1,2,3,4), c(3,2,1,2,3), c(4,3,2,1,2),c(5,4,3,2,1))
y = c(7,-1,-3,5,17)
colnames(A)
colnames(A) <- paste0('x', 1:5)
A
solve(A,y)
if((a<-3) >0){
print(a)
} else {
cat(a)
}
cat(2+3)
a<-1:10
ifelse(a %% 2 == 0, a^2, a+1)
a<-123
switch (class(liczba)),
switch (class(liczba))
switch (class(liczba)),
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say")
liczba = 10
switch (class(liczba)),
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say")
switch (class(liczba)),
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say")
switch (class(liczba))
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say")
switch (class(liczba),
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say"))
a<="a"
switch (class(a),
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say"))
a<-"a"
switch (class(a),
logical = , numeric = cat("numeric or logical type"), factor = cat("factor type"), cat("hard tp say"))
a<-0
while(a>5){
a<-a+1
}
repeat{
a<-a+1
print(a)
if(a>10) break
}
fun1 <- function(){
cat("fun1 is working")
}
fun1()
fun2 <- fun1
fun2
edit(fun2)
fun3 <- function(a=2, b=3){
2*a+b
}
fun3()
fun3(4,6)
remove(fun3)
fun3 <- function(abba=2, big=4){
2*abba + big
}
fun3()
fun3(ab=1,b=3)
fun4 <- function(){
tr <- 5
sr<<- 4
tr+sr
}
fun4
fun4()
smelse <- function(x) UseMethod("smelse")
smelse.default <- function(x) length(x)
smelse.matrix <- function(x) dim(x)[1]*dim(x)[2]
smelse(1:13)
smelse(matrix(0,6,9))
writeCurrentDate <- function(){}
edit(writeCurrentDate())
writeCurrentDate()
edit(writeCurrentDate())
writeCurrentDate()
remove(writeCurrentDate())
remove(writeCurrentDate
)
writeCurrentDate <- function(){
cat("the current time is")
cat(sys.time())
}
writeCurrentDate()
edit(writeCurrentDate())
edit(writeCurrentDate
)
writeCurrentDate()
remove(writeCurrentDate)
writeCurrentDate <- function(){
cat("the current time is")
cat(Sys.time())
}
writeCurrentDate()
View(fun3)
View(fun4)
View(writeCurrentDate)
edit(writeCurrentDate)
View(writeCurrentDate)
remove(writeCurrentDate)
writeCurrentDate <- function(){
cat("the current time is")
cat(Sys.Date())
}
writeCurrentDate()
mykPower <- function(BASE = 6, POWER = 9){
return (BASE**POWER)
}
mykPower()
isInVector <- function(VEC, NUM = 0){
return (NUM %in% VEC)
}
VEC <- 1:10
VEC <- c(1,2,3,4)
isInVector(VEC)
isInVector(VEC,1)
ex4 <- function(VEC){
if (length(VEC) %% 2 != 0){
VEC[VEC %% 2 == 0] <- (VEC[VEC %% 2 == 0])**2
} else {
VEC[VEC %% 2 != 0] <- (VEC[VEC %% 2 != 0])**2
}
return(VEC)
}
ex4(VEC)
ex5 <- function(VEC, SUBSEQUENCE = 3){
sorted <- sort(VEC)
return(sorted[1:SUBSEQUENCE])
}
ex5(c(5,2,9,4,7,5,6))
ex6 <- function(mat = matrix(c(0, 0, 0, 0), nrow = 2, ncol = 2)){
dimension = dim(mat)
return (mat %^% dimension)
}
ex6()
install.packages("expm", repos="http://R-Forge.R-project.org")
library(expm)
ex6()
ex6(matrix(c(2,2,2,2)))
ex6(matrix(c(2,2,2,2),2,2))
"%=>%" <- function(a, b){
if (a && !b){
return (FALSE)
} else {
return (TRUE)
}
}
savehistory("~/AGH/Avengers 3/R/lab02/wdhist.Rhistory")
"%+2%" <- function(a,b){
(a+b)^2
}
1 %+2% 2
2 %+2% 4
"%ev%" <- function(a,b){
if(b %% 2 == 0){
return(a*b)
}
else{
return(a+b)
}
}
3 %ev% 4
3 %ev% 5
ex8 <- c(TRUE, FALSE, FALSE, TRUE, FALSE)
truthcount <- function(v){
sum(v, na.rm = TRUE)
}
thruthcount(ex8)
truthcount(ex8)
falsecount <- function(v){
sum(z, na.rm = FALSE)
}
falsecount(ex8)
falsecount <- edit(falsecount)
falsecount
falsecount(ex8)
falsecount(ex8)
View(falsecount)
View(falsecount)
View(falsecount)
View(falsecount)
View(falsecount)
View(truthcount)
View(falsecount)
falsecount <- edit(falsecount)
falsecount(ex8)
v
ex8
ex8
randlett <- function(NUM = 10){
str <- stri_rand_strings(n, length, pattern = "[A-Za-z0-9]")
print(str)
print(str[3])
}
randletter()
randlett
randlett()
install.packages("stringi", repos="http://R-Forge.R-project.org")
install.packages("Rtools", repos="http://R-Forge.R-project.org")
ex9 <- function(v1, v2){
}
ex9 <- edit(ex9)
v1 <- c(1 2 3 -1 0 4)
v1 <- c(1, 2, 3, -1, 0, 4)
v2 <- c(2, 1, 5, 4, -3, 4)
ex9(v1,v2)
ex10 <- function(a){
print(switch(class(a)[1], "logicel"=a, "numeric"=a^2, "matrix"=dim(x), length(x)))
}
ex10(TRUE)
ex10(5)
ex10(matrix(2,2,2,2))
ex10(matrix())
ex10(
)
ex10()
ex10(lol)
ex10("kkklll")
savehistory("~/AGH/Magisterka/R/lab02/wdhist.Rhistory")
stri_rand_strings(1, 4, pattern = "[A-Za-z0-9]")
install.packages("stringi", repos="http://R-Forge.R-project.org")
install.packages("stringi")
stri_rand_strings(1, 4, pattern = "[A-Za-z0-9]")
stri_rand_strings(1, 4, pattern = "[A-Za-z0-9]")
stringi
LETTERS[seq( from = 1, to = 10 )]
ex8 <- edit(ex8)
falsecount <- function(v){
sum(v, na.rm = FALSE)}
truthcount <- function(v){
sum(v, na.rm=TRUE)}
falsecount <- edit(falsecount)
randlett <- function(NUM = 10){
v = LETTERS[seq( from = 1, to = NUM )]
}
randlett()
print(randlett())
randlett <- edit(randlett)
randlett <- edit(randlett)
randlett <- edit(randlett)
randlett(4)
randlett(4)
randlett(4)
randlett(4)
randlett(4)
randlett(4)
randlett(4)
randlett(4)
View(randlett)
v = LETTERS[seq( from = 1, to = NUM )]
v = LETTERS[seq( from = 1, to = 4 )]
v
v[2]
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett()
randlett(15)
library(random)
string <- randomStrings(n=10, len=5, digits=TRUE, upperalpha=TRUE,
loweralpha=TRUE, unique=TRUE, check=TRUE)
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, n, TRUE)), sample(LETTERS, n, TRUE))
}
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, n, TRUE)), sample(LETTERS, n, TRUE))
}
randstring()
randstring(1)
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, 5, TRUE)), sample(LETTERS, n, TRUE))
}
randstring(1)
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(5, sample(LETTERS, n, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, 1, TRUE)), sample(LETTERS, 5, TRUE))
}
randstring(1)
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(5, sample(LETTERS, 1, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, 1, TRUE)), sample(LETTERS, 1, TRUE))
}
randstring(1)
randstring(9)
randstring(1)
do.call(paste0, Map(stri_rand_strings, n=5, length=c(5, 4, 1),
pattern = c('[A-Z]', '[0-9]', '[A-Z]')))
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(2, sample(LETTERS, 1, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, 1, TRUE)), sample(LETTERS, 1, TRUE))
}
randstring(1)
randstring(1)
randstring(1)
randstring(1)
randstring(0)
randstring(0)
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(0, sample(LETTERS, 1, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, 1, TRUE)), sample(LETTERS, 1, TRUE))
}
randstring(0)
randstring <- function(n = 10) {
a <- do.call(paste0, replicate(-3, sample(LETTERS, 1, TRUE), FALSE))
paste0(a, sprintf("%04d", sample(9999, 1, TRUE)), sample(LETTERS, 1, TRUE))
}
randstring(0)
savehistory("~/AGH/Magisterka/R/lab02/wdhist.Rhistory")
